{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","cmonster","id","name","email","Cardlist","monster","map","m","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","monsters","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAGaA,G,kBAAM,SAACC,GAAD,OAEnB,yBAAKC,UAAW,kBAEhB,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,SAASC,GAAzC,4BAEtB,iCAAOL,EAAMI,SAASE,KAAtB,MACA,4BAAKN,EAAMI,SAASG,UCJPC,EAAW,SAACR,GAAD,OAIxB,yBAAKC,UAAU,aAEbD,EAAMS,QAAQC,KAChB,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAMC,IAAKD,EAAEN,GAAKD,SAAWO,SCVrBE,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OAGzB,2BACAC,KAAK,SACLF,YAAcA,EACbb,UAAU,SACXgB,SAAWF,MCoDIG,E,YAvDb,aAAc,IAAD,8BACX,+CAeJH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAflC,EAAKC,MAAQ,CACXC,SAAU,GACVJ,YAAY,IAJH,E,iFAQS,IAAD,OAEjBK,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACK,SAAUK,S,+BAQnC,IAAD,EAEuBC,KAAKP,MAA5BC,EAFA,EAEAA,SAASJ,EAFT,EAESA,YAEbW,EAAkBP,EAASQ,QAE/B,SAAAtB,GAAC,OAAEA,EAAEL,KAAK4B,cAAcC,SAASd,EAAYe,wBAO7C,OAEE,yBAAKnC,UAAU,OAEnB,gDAEK,kBAAC,EAAD,CACEa,YAAY,kBACZC,aAAegB,KAAKhB,eAGpB,kBAAC,EAAD,CAAUN,QAAUuB,S,GA9CTK,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.56a716c2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card =(props) => (\r\n\r\n<div className =\"card-container\" >\r\n\r\n<img alt=\"monster\" src={`https://robohash.org/${props.cmonster.id}?set=set2&size=180x180`} /> \r\n\r\n<h2>  {props.cmonster.name }  </h2>\r\n<h2>{props.cmonster.email}</h2>\r\n\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n)","import React from 'react'\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card.component';\r\n\r\n\r\n\r\nexport const Cardlist = (props) => \r\n//props componentin name vb özelliklerini almak icin kullanılır\r\n(\r\n\r\n<div className='card-list' >\r\n\r\n{ props.monster.map(\r\nm => <Card key={m.id}  cmonster ={m}></Card> )\r\n}\r\n</div> \r\n\r\n\r\n);\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder,handleChange}) => (\r\n\r\n    \r\n<input \r\ntype='search' \r\nplaceholder= {placeholder}\r\n className='search'\r\nonChange= {handleChange}\r\n/>\r\n\r\n\r\n\r\n)","import React from 'react';\nimport './App.css';\nimport {Cardlist} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\n\nclass App extends React.Component {\n\n  constructor(){ // setstate gibi propertyler var\n    super(); // component classdaki yapıcı fonk cagırır\n    this.state = {\n      monsters: [ ],\n      searchField:''\n    }\n   // this.handleChange=this.handleChange.bind(this); arrow func kullanmadıgımız durumlarda , yazılan fonk constructorda this keywordu kullanılarak bind metodu ile bildirilmeli.\n  }\n    componentDidMount(){\n\n      fetch('https://jsonplaceholder.typicode.com/users') // json formatlı veriye erişim\n      .then(response => response.json()) // js nin anlayabilecegi dönüsüm json2js\n      .then(users => this.setState({monsters: users})); // users nesnesi yaratıldı setState fonk ile monsters dizisine nesne atıldı\n\n    }\n\nhandleChange = (e)=> {\n  this.setState({searchField:e.target.value});\n}\n\n  render(){\n\n   const {monsters,searchField} =this.state;\n    // const monsters = this.state.monsters ve const searchField = this.state.searchField\nconst filteredMonsters= monsters.filter(\n\n  m=>m.name.toLowerCase().includes(searchField.toLocaleLowerCase()) // monster adı searchfield'da iceriyorsa içeriği döndür\n\n)\n\n\n\n\n  return (\n\n    <div className=\"App\">\n\n<h1>MONSTERS ROLODEX</h1>     \n\n     <SearchBox\n       placeholder='search monsters'\n       handleChange= {this.handleChange}\n        //arama alanına onchange eventının target fonk. value propu ile textboxa yazılan metni atıyoruz.\n       />\n       <Cardlist monster ={filteredMonsters} />\n      \n\n    </div>\n  );\n}\n  }\n\n  \n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}